// This file was autogenerated by grunt-closure-dicontainer task.
// Please do not edit.
goog.provide('app.DiContainer');

goog.require('App');
goog.require('app.Router');
goog.require('goog.asserts');

/**
 * @constructor
 * @final
 */
app.DiContainer = function() {
  this.rules = [];
};

/**
 * @type {Array}
 * @private
 */
app.DiContainer.prototype.rules;

/**
 * Configure resolving rules for DI Container.
 * @param {...Object} var_args
 *   - resolve: Type or array of types to be resolved.
 *   - as: Which type should be return instead.
 *   - with: Named values for arguments we know in runtime therefore have
 *      to be configured in runtime too.
 *   - by: A factory method for custom resolving.
 */
app.DiContainer.prototype.configure = function(var_args) {
  for (var i = 0; i < arguments.length; i++) {
    var rule = arguments[i];
    goog.asserts.assertObject(rule,
      'DI container: Configuration rule has to be type of object.');
    goog.asserts.assertObject(rule.resolve,
      'DI container: Rule resolve property must be type of object.');
    goog.asserts.assert(this.ruleIsWellConfigured(rule),
      'DI container: Rule has to define at least one of these props: with, as, by.');
    goog.asserts.assert(!this.ruleWasYetConfigured(rule),
      'DI container: Rule resolve prop can be configured only once.');
    this.rules.push(rule);
  }
};

/**
 * Factory for 'App'.
 * @return {App}
 */
app.DiContainer.prototype.resolveApp = function() {
  var rule = /** @type {{
    resolve: (Object),
    as: (Object|undefined),
    with: ({
      router: (app.Router|undefined)
    }),
    by: (Function|undefined)
  }} */ (this.getRuleFor(App));
  return this.app || (this.app = new App(
    rule['with'].router || this.resolveAppRouter()
  ));
};

/**
 * @return {app.Router}
 * @private
 */
app.DiContainer.prototype.resolveAppRouter = function() {
  var rule = /** @type {{
    resolve: (Object),
    as: (Object|undefined),
    by: (Function|undefined)
  }} */ (this.getRuleFor(app.Router));
  return this.appRouter || (this.appRouter = new app.Router);
};

/**
 * @private
 */
app.DiContainer.prototype.getRuleFor = function(type) {
  var rule;
  for (var i = 0; i < this.rules.length; i++) {
    rule = this.rules[i];
    if (rule.resolve == type) break;
  }
  rule = rule || {};
  rule['with'] = rule['with'] || {};
  return rule;
};

/**
 * @param {Object} rule
 * @return {boolean}
 * @private
 */
app.DiContainer.prototype.ruleIsWellConfigured = function(rule) {
  if (rule['with'] || rule.by || rule.as) {
    if (rule['with']) goog.asserts.assertObject(rule['with'],
      'DI container: rule.with property must be type of object.');
    if (rule['as']) goog.asserts.assertObject(rule.as,
      'DI container: rule.as property must be type of object.');
    if (rule['by']) goog.asserts.assertFunction(rule.by,
      'DI container: rule.by property must be type of function.');
    return true;
  }
  return false;
};

/**
 * @param {Object} newRule
 * @return {boolean}
 * @private
 */
app.DiContainer.prototype.ruleWasYetConfigured = function(newRule) {
  return this.rules.some(function(rule) {
    return rule.resolve == newRule.resolve;
  });
};